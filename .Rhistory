flights[flights$Month==1 & flights$DayofMonth==1, ]
filter(flights, Month==1, DayofMonth==1)
filter(flights, Month==1 & DayofMonth==1)
filter(flights, UniqueCarrier=="AA" | UniqueCarrier=="UA")
# base R approach to select DepTime, ArrTime, and FlightNum columns
flights[, c("DepTime", "ArrTime", "FlightNum")]
# dplyr approach
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
sum(flights$DepDelay > 60)
aa <- flights$DepDelay > 60
table(aa)
sum(aa)
sum(as.number(aa))
sum(as.numeric(aa))
table(as.numeric(aa))
aanum <- as.numeric(aa)
sum(aa, na.rm=T)
table(aa, useNA = ifany)
table(aa, useNA = "ifany")
table(flights$DepDelay > 60, useNA = "ifany")
filter(select(flights, UniqueCarrier, DepDelay), DepDelay > 60)
# chaining method
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
x1 <- 1:5; x2 <- 2:6
sqrt(sum((x1-x2)^2))
(x1-x2)^2 %>% sum() %>% sqrt()
system.time(sqrt(sum((x1-x2)^2)))
system.time((x1-x2)^2 %>% sum() %>% sqrt())
system.time(sqrt(sum((x1-x2)^2))) * 1000
system.time(filter(select(flights, UniqueCarrier, DepDelay), DepDelay > 60))
system.time(flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60))
flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
# dplyr approach
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
system.time(flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")])
system.time(flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay))
# use `desc` for descending
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay))
system.time(flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay)))
flights$Speed <- flights$Distance / flights$AirTime*60
flights[, c("Distance", "AirTime", "Speed")]
# dplyr approach (prints the new variable but does not store it)
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60)
flights[,-Speed]
flights[,-"Speed"]
flights[, -c("Speed")]
flights[, c(-"Speed")]
flights[c(-"Speed")]
flights[c(-22)]
names(flights)
flights["Speed"]
flights[-"Speed"]
flights[[-"Speed"]]
flights["Speed"] <- NULL
# dplyr approach (prints the new variable but does not store it)
flights %>%
select(Distance, AirTime) %>%
mutate(Speed = Distance/AirTime*60)
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
tapply(ArrDelay, Dest, mean, na.rm=TRUE)
with(flights,tapply(ArrDelay, Dest, mean, na.rm=TRUE))
str(flights$Dest)
table(flights$Dest)
head(with(flights, tapply(ArrDelay, Dest, mean, na.rm=TRUE)))
head(aggregate(ArrDelay ~ Dest, flights, mean))
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
out1 <- with(flights,tapply(ArrDelay, Dest, mean, na.rm=TRUE))
out2 <- aggregate(ArrDelay ~ Dest, flights, mean)
out3 <- flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
str(out1)
str(out2)
str(out3)
dim(out1)
dim(out2)
dim(out3)
# for each carrier, calculate the percentage of flights cancelled or diverted
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
aa <- flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
aa * 100
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean*100), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean)*100, Cancelled, Diverted)
aa <- flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
aap <- aa[c(2,3)]*100
aa
aap
aap <- aa
aap[c(2,3)] <- aa[c(2,3)]*100
aa
aap
# for each carrier, calculate the minimum and maximum arrival and departure delays
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("Delay"))
# for each day of the year, count the total number of flights
# and sort in descending order
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count))
# rewrite more simply with the `tally` function
flights %>%
group_by(Month, DayofMonth) %>%
tally(sort = TRUE)
# for each destination, count the total number of flights
# and the number of distinct planes that flew there
flights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
# for each destination, show the number of cancelled and not cancelled flights
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
install.packages("Gmisc")
library(Gmisc)
install.packages("stargazer")
library(stargazer)
fit1 <- lm(mpg ~ wt, mtcars)
fit2 <- lm(mpg ~ wt + hp, mtcars)
fit3 <- lm(mpg ~ wt + hp + disp, mtcars)
anova(fit1,fit2,fit3)
install.packages("Hmisc")
library(Hmisc)
install.packages("Hmisc")
library("Hmisc", lib.loc="~/R/win-library/3.2")
anova(fit3,fit2,fit1)
t1
data(mtcars)
label(mtcars$mpg) <- "Gas"
units(mtcars$mpg) <- "Miles/(US) gallon"
label(mtcars$wt) <- "Weight"
units(mtcars$wt) <- "10<sup>3</sup> kg" # not sure the unit is correct
mtcars$am <- factor(mtcars$am, levels=0:1, labels=c("Automatic", "Manual"))
label(mtcars$am) <- "Transmission"
mtcars$gear <- factor(mtcars$gear)
label(mtcars$gear) <- "Gears"
# Make up some data for making it slightly more interesting
mtcars$col <- factor(sample(c("red", "black", "silver"),
size=NROW(mtcars), replace=TRUE))
label(mtcars$col) <- "Car color"
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am)
library(Gmisc)
library(Hmisc)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am,
continuous_fn = describeMedian)
getTable1Stats <- function(x, digits = 0, ...){
getDescriptionStatsBy(x = x,
by = mtcars$am,
digits = digits,
continuous_fn = describeMedian,
header_count = TRUE,
...)
}
getTable1Stats(mtcars$mpg)
getTable1Stats(mtcars$mpg, use_units = TRUE)
t1 <- list()
t1[["Gas"]] <-
getTable1Stats(mtcars$mpg)
t1[["Weight&dagger;"]] <-
getTable1Stats(mtcars$wt)
t1[["Color"]] <-
getTable1Stats(mtcars$col)
# If we want to use the labels set in the beginning
# we add an element without a name
t1 <- c(t1,
list(getTable1Stats(mtcars$gear)))
str(t1)
knitr::kable(t1)
getTable1Stats(mtcars$mpg, use_units = TRUE)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am,
continuous_fn = describeMedian)
t1 <- list()
t1[["Gas"]] <-
getTable1Stats(mtcars$mpg)
t1[["Weight&dagger;"]] <-
getTable1Stats(mtcars$wt)
t1[["Color"]] <-
getTable1Stats(mtcars$col)
t1
install.packages("knitr")
install.packages("pander")
install.packages("xtable")
knitr::opts_knit$set(out.format = "markdown")
library(knitr)
installed.packages()
data()
library(help = "base")
??sm
??forestplot
pkglist <- c("coin","vcd")
install.packages(pkglist)
pkglist2 <- c(coin,vcd)
library(pkglist)
lapply(pkglist, require, character.only = TRUE)
sessionInfo()
detach("coin")
detach(coin)
detach(package:coin)
detach(package:vcd)
sessionInfo()
lapply(pkglist, library, character.only = TRUE)
sessionInfo()
citation(package = "base")
citation(package = "qgraph")
install.packages("qgraph")
install.packages("igraph")
citation(package = "qgraph")
citation(package = "igraph")
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 0)
x2 <- c( 0,NA,NA,NA, 1, 0, 1, 0, 0, 0)
x3 <- c( 0, 1,NA,NA,NA, 0, 0, 0,NA, 0)
x4 <- c( 1, 1,NA,NA, 0, 1, 0, 0, 1, 1)
x5 <- c( 0, 1,NA,NA, 0, 1, 1, 0,NA, 1)
xdf <- data.frame(x1,x2,x3,x4,x5)
xdf
rm(x1,x2,x3,x4,x5)
attach(xdf)
x12 <- cbind(x1,x2)
environment()
detach()
environment()
search()
attach(xdf)
search()
ls()
str(xdf)
ls.str(xdf)
as.environment(xdf)
search()
environment()
search()
detach()
search()
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 0)
attach(xdf)
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 45)
x1
detach()
x1
View(xdf)
search()
rm(x1)
attach(xdf)
x1
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 45)
ls(envir = .GlobalEnv)
ls()
ls(envir = xdf)
search()
ls(envir = as.environment(2))
x1()
x1
xdf
x2
get(x1, envir = as.environment(2))
get('x1', envir = as.environment(2))
get('x1', envir = as.environment(1))
x1
xdf$x1
search()
detach
detach()
ls()
search()
rm(x1, x12)
ls
ls()
xd
xdf
x1 <- c( 0, 1,NA,NA, 1, 1, 0, 0,NA, 0)
x2 <- c( 0,NA,NA,NA, 1, 0, 1, 0, 0, 0)
x3 <- c( 0, 1,NA,NA,NA, 0, 0, 0,NA, 0)
x4 <- c( 1, 1,NA,NA, 0, 1, 0, 0, 1, 1)
x5 <- c( 0, 1,NA,NA, 0, 1, 1, 0,NA, 1)
xdf <- data.frame(x1,x2,x3,x4,x5)
xdf
with(xdf, table(x1))
with(xdf,
table(x1),
sum(x1),
mean(x1))
with(xdf, {
table(x1),
sum(x1),
mean(x1)})
with(xdf, {
table(x1)
sum(x1)
mean(x1)})
with(xdf, {
t <- table(x1)
s <- sum(x1)
m <- mean(x1)})
View(xdf)
t
with(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)})
t1
s1
m1
search()
with(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)
search()})
within(xdf, {
t1 <- table(x1)
s1 <- sum(x1)
m1 <- mean(x1)
search()})
table(xdf$x1)
sum(x1)
mean(x1)
xdf$t1 <- xfd$s1 <- xdf$m1 <- NULL
xdf$t1 <- xdf$s1 <- xdf$m1 <- NULL
View(xdf)
with(xdf, table(x1))
with(xdf, table(x1))
with(xdf, sum(x1, na.rm=TRUE))
with(xdf, mean(x1, na.rm=TRUE))
with(xdf, {
table(x1)
sum(x1, na.rm=TRUE)
mean(x1, na.rm=TRUE)
})
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
})
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
})
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
})
View(xdf)
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
})
View(xdf)
View(xdf)
with(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
print(xdf)
})
within(xdf, {
print(table(x1))
print(sum(x1, na.rm=TRUE))
print(mean(x1, na.rm=TRUE))
b <- 5
print(xdf)
})
fahrenheit_to_celcius <- function(f) (f - 32) / 1.8
airquality <- with(airquality, list(
fahrenheit_to_celcius(Temp),
log(Ozone),
month.abb[Month]
))
airquality <- within(airquality,
{
cTemp2     <- fahrenheit_to_celcius(Temp)
logOzone2  <- log(Ozone)
MonthName2 <- month.abb[Month]
})
rm(airquality)
airquality <- within(airquality,
{
cTemp2     <- fahrenheit_to_celcius(Temp)
logOzone2  <- log(Ozone)
MonthName2 <- month.abb[Month]
})
View(airquality)
View(airquality)
airquality <- transform(airquality,
cTemp3     = fahrenheit_to_celcius(Temp),
logOzone3  = log(Ozone),
MonthName3 = month.abb[Month]
)
View(airquality)
getwd()
setwd("C:/MyGithub/CDCRworkshopCode")
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
data.csv[18,"Height"] <- 5.6
data.csv$bmiPRE <- (data.csv$WeightPRE*703)/((data.csv$Height*12)**2)
data.csv$bmiPOST <- (data.csv$WeightPOST*703)/((data.csv$Height*12)**2)
# create a factor variable for gender
data.csv$GenderFactor <- factor(data.csv$GenderCoded,
levels = c(1,2),
labels = c("Male","Female"))
data.csv
head(data.csv[,c("GenderCoded","GenderFactor")])
data.csv$GenderFactor
str(data.csv$GenderFactor)
class(data.csv$GenderFactor)
table(data.csv$GenderFactor, useNA = "ifany")
table(data.csv$GenderFactor, exclude = NULL)
barplot(table(data.csv$GenderCoded))
barplot(table(data.csv$GenderFactor))
data.csv$Age == 45
data.csv$Age != 45
data.csv$GenderFactor != "Female"
data.csv <- within(data.csv,{
bmiPREcat <- NA
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30 & bmiPRE < 60] <- "obese"
})
str(data.csv$bmiPREcat)
table(data.csv$bmiPREcat, exclude = NULL)
table(data.csv$bmiPREcat)
# now create the categories again
# for the POST BMI
data.csv <- within(data.csv,{
bmiPOSTcat <- NA
bmiPOSTcat[bmiPOST < 18.5] <- "underweight"
bmiPOSTcat[bmiPOST >= 18.5 & bmiPOST < 25] <- "normal"
bmiPOSTcat[bmiPOST >= 25 & bmiPOST < 30] <- "overweight"
bmiPOSTcat[bmiPOST >= 30] <- "obese"
})
data.csv[,c("bmiPRE","bmiPREcat","bmiPOST","bmiPOSTcat")]
a <- NA
a == NA
a < NA
a > NA
a != NA
is.na(a)
anyNA(a)
View(data.csv)
names(data.csv)
myvars <- c("SubjectID","Age","SES","GenderSTR",
"GenderCoded","GenderFactor","Height",
"WeightPRE","bmiPRE","bmiPREcat",
"WeightPOST","bmiPOST","bmiPOSTcat")
data.csv.neworder <- data.csv[,myvars]
View(data.csv.neworder)
str(data.csv$bmiPREcat)
str(data.csv$bmiPOSTcat)
data.csv$bmiPREcat.or <- factor(data.csv$bmiPREcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
data.csv$bmiPOSTcat.or <- factor(data.csv$bmiPOSTcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
View(data.csv)
# we could update the order one more time
myvars <- c("SubjectID","Age","SES","GenderSTR",
"GenderCoded","GenderFactor","Height",
"WeightPRE","bmiPRE","bmiPREcat","bmiPREcat.or",
"WeightPOST","bmiPOST","bmiPOSTcat","bmiPOSTcat.or")
data.csv.neworder <- data.csv[,myvars]
View(data.csv.neworder)
barplot(table(data.csv$bmiPREcat.or))
with(data.csv,
barplot(table(bmiPREcat.or)))
