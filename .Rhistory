# for each destination, show the number of cancelled and not cancelled flights
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
install.packages("Gmisc")
library(Gmisc)
install.packages("stargazer")
library(stargazer)
fit1 <- lm(mpg ~ wt, mtcars)
fit2 <- lm(mpg ~ wt + hp, mtcars)
fit3 <- lm(mpg ~ wt + hp + disp, mtcars)
anova(fit1,fit2,fit3)
install.packages("Hmisc")
library(Hmisc)
install.packages("Hmisc")
library("Hmisc", lib.loc="~/R/win-library/3.2")
anova(fit3,fit2,fit1)
t1
data(mtcars)
label(mtcars$mpg) <- "Gas"
units(mtcars$mpg) <- "Miles/(US) gallon"
label(mtcars$wt) <- "Weight"
units(mtcars$wt) <- "10<sup>3</sup> kg" # not sure the unit is correct
mtcars$am <- factor(mtcars$am, levels=0:1, labels=c("Automatic", "Manual"))
label(mtcars$am) <- "Transmission"
mtcars$gear <- factor(mtcars$gear)
label(mtcars$gear) <- "Gears"
# Make up some data for making it slightly more interesting
mtcars$col <- factor(sample(c("red", "black", "silver"),
size=NROW(mtcars), replace=TRUE))
label(mtcars$col) <- "Car color"
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am)
library(Gmisc)
library(Hmisc)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am,
continuous_fn = describeMedian)
getTable1Stats <- function(x, digits = 0, ...){
getDescriptionStatsBy(x = x,
by = mtcars$am,
digits = digits,
continuous_fn = describeMedian,
header_count = TRUE,
...)
}
getTable1Stats(mtcars$mpg)
getTable1Stats(mtcars$mpg, use_units = TRUE)
t1 <- list()
t1[["Gas"]] <-
getTable1Stats(mtcars$mpg)
t1[["Weight&dagger;"]] <-
getTable1Stats(mtcars$wt)
t1[["Color"]] <-
getTable1Stats(mtcars$col)
# If we want to use the labels set in the beginning
# we add an element without a name
t1 <- c(t1,
list(getTable1Stats(mtcars$gear)))
str(t1)
knitr::kable(t1)
getTable1Stats(mtcars$mpg, use_units = TRUE)
getDescriptionStatsBy(x = mtcars$mpg,
by = mtcars$am,
continuous_fn = describeMedian)
t1 <- list()
t1[["Gas"]] <-
getTable1Stats(mtcars$mpg)
t1[["Weight&dagger;"]] <-
getTable1Stats(mtcars$wt)
t1[["Color"]] <-
getTable1Stats(mtcars$col)
t1
install.packages("knitr")
install.packages("pander")
install.packages("xtable")
knitr::opts_knit$set(out.format = "markdown")
library(knitr)
installed.packages()
data()
library(help = "base")
??sm
??forestplot
pkglist <- c("coin","vcd")
install.packages(pkglist)
pkglist2 <- c(coin,vcd)
library(pkglist)
lapply(pkglist, require, character.only = TRUE)
sessionInfo()
detach("coin")
detach(coin)
detach(package:coin)
detach(package:vcd)
sessionInfo()
lapply(pkglist, library, character.only = TRUE)
sessionInfo()
citation(package = "base")
citation(package = "qgraph")
install.packages("qgraph")
install.packages("igraph")
citation(package = "qgraph")
citation(package = "igraph")
y <- 1:12
y
y[1]
y[1]==1
y[1]==1L
3-2 == y[1]
3-2 == 1L
df2 <- data.frame(y, month.name, month.abb,
stringsAsFactors = FALSE)
df2
str(df2)
fix(df2)
load("allobjects.RData")
setwd('C:/MyGithub/CDCRworkshopCode')
load("allobjects.RData")
ls()
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
install.packages("haven")
library(haven)
data.sas <- read_sas(file = "Dataset_01.sas7bdat")
getwd()
data.sas <- read_sas("Dataset_01.sas7bdat")
View(data.sas)
test1.sas <- read_sas("http://crn.cancer.gov/resources/ctcodes-procedures.sas7bdat")
View(test1.sas)
datav78.sas <- read_sas("Dataset_01_v78.sas7bdat")
getwd()
datav78.sas <- read_sas("Dataset_01_v78.sas7bdat")
datav78.sas <- read_sas("Dataset01v78.sas7bdat")
library(haven)
datav78.sas <- read_sas("Dataset01v78.sas7bdat")
datav78.sas <- read_sas("data1.sas7bdat")
datav78.sas <- read_sas("datav78.sas7bdat")
View(datav78.sas)
datalocal.sas <- read_sas("Dataset_01local.sas7bdat")
View(datalocal.sas)
datautf.sas <- read_sas("Dataset_01utf.sas7bdat")
View(datautf.sas)
getOption(encoding)
getOption("encoding")
test2.sas <- read_sas("ctcodes-procedures.sas7bdat")
View(test2.sas)
install.packages("readr")
library("readr", lib.loc="~/R/win-library/3.2")
guess_encoding("ctcodes-procedures.sas7bdat", n_max = 1000)
guess_encoding("Dataset_01.sas7bdat", n_max = 1000)
guess_encoding("datav78.sas7bdat", n_max = 1000)
View(datav78.sas)
View(test1.sas)
View(test2.sas)
guess_encoding("Dataset_01.sas7bdat", n_max = 1000)
guess_encoding("datav78.sas7bdat", n_max = 1000)
guess_encoding("ctcodes-procedures.sas7bdat", n_max = 1000)
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
attach(data.csv)
data.csv[18,"Height"] <- 5.6
View(data.csv)
data.csv$bmiPRE <- (WeightPRE*703)/((Height*12)**2)
data.csv$bmiPOST <- (WeightPOST*703)/((Height*12)**2)
hist(bmiPRE, freq=FALSE)
View(data.csv)
ls()
bmiPRE
search()
ls(envir="data.csv")
ls(envir=as.enviroment(2))
is.environment("data.csv")
is.environment(".GlobalEnvironment")
environment()
detach(data.csv)
environment()
attach(data.csv)
hist(bmiPRE, freq=FALSE)
lines(density(bmiPRE))
detach(data.csv)
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
attach(data.csv)
data.csv[18,"Height"] <- 5.6
data.csv$bmiPRE <- (WeightPRE*703)/((Height*12)**2)
data.csv$bmiPOST <- (WeightPOST*703)/((Height*12)**2)
detach(data.csv)
View(data.csv)
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
data.csv[18,"Height"] <- 5.6
data.csv$bmiPRE <- (data.csv$WeightPRE*703)/((data.csv$Height*12)**2)
data.csv$bmiPOST <- (data.csv$WeightPOST*703)/((data.csv$Height*12)**2)
hist(data.csv$bmiPRE)
View(data.csv)
data.csv$GenderFactor <- factor(data.csv$GenderCoded,
levels = c(1,2),
labels = c("Male","Female"))
table(data.csv$GenderFactor)
data.csv <- within(data.csv{
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30] <- "obese"
})
data.csv <- within(data.csv,{
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30] <- "obese"
})
data.csv <- within(data.csv,{
bmiPREcat <- NA
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30] <- "obese"
})
table(data.csv$bmiPREcat)
data.csv <- within(data.csv,{
bmiPOSTcat <- NA
bmiPOSTcat[bmiPOST < 18.5] <- "underweight"
bmiPOSTcat[bmiPOST >= 18.5 & bmiPOST < 25] <- "normal"
bmiPOSTcat[bmiPOST >= 25 & bmiPOST < 30] <- "overweight"
bmiPOSTcat[bmiPOST >= 30] <- "obese"
})
table(data.csv$bmiPOSTcat)
str(data.csv$bmiPREcat)
str(data.csv$bmiPOSTcat)
data.csv$bmiPREcat.or <- factor(data.csv$bmiPREcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
data.csv$bmiPOSTcat.or <- factor(data.csv$bmiPOSTcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
str(data.csv$bmiPREcat.or)
str(data.csv$bmiPOSTcat.or)
View(data.csv)
table(data.csv$bmiPREcat.or)
table(data.csv$bmiPOSTcat.or)
sum(data.csv$bmiPREcat.or)
barplot(data.csv$bmiPREcat.or)
barplot(table(data.csv$bmiPREcat.or))
with(data.csv, batplot(bmiPREcat.or))
with(data.csv, barplot(bmiPREcat.or))
with(data.csv, barplot(table(bmiPREcat.or)))
data.csv$age35plus <- data.csv[data.csv$Age<35,"Age"] <- NA
View(data.csv)
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv
data.csv[18,"Height"] <- 5.6
data.csv$bmiPRE <- (data.csv$WeightPRE*703)/((data.csv$Height*12)**2)
data.csv$bmiPOST <- (data.csv$WeightPOST*703)/((data.csv$Height*12)**2)
data.csv$GenderFactor <- factor(data.csv$GenderCoded,
levels = c(1,2),
labels = c("Male","Female"))
data.csv$GenderFactor
str(data.csv$GenderFactor)
class(data.csv$GenderFactor)
table(data.csv$GenderFactor)
# try some more recoding
# create new variable with BMI categories
# we'll use within() function to make the
# coding easier
# the code below creates 2 new variables
# with character labels for each category
data.csv <- within(data.csv,{
bmiPREcat <- NA
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30] <- "obese"
})
table(data.csv$bmiPREcat)
# now do it again for the POST BMI
data.csv <- within(data.csv,{
bmiPOSTcat <- NA
bmiPOSTcat[bmiPOST < 18.5] <- "underweight"
bmiPOSTcat[bmiPOST >= 18.5 & bmiPOST < 25] <- "normal"
bmiPOSTcat[bmiPOST >= 25 & bmiPOST < 30] <- "overweight"
bmiPOSTcat[bmiPOST >= 30] <- "obese"
})
table(data.csv$bmiPOSTcat)
str(data.csv$bmiPREcat)
str(data.csv$bmiPOSTcat)
# notice that the table lists
# the categories in alphabetical order
# which is not what we want
# we would like overweight listed
# before obese.
# so let's assign an order to our levels
# we will create an ordered factor
data.csv$bmiPREcat.or <- factor(data.csv$bmiPREcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
data.csv$bmiPOSTcat.or <- factor(data.csv$bmiPOSTcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
str(data.csv$bmiPREcat.or)
str(data.csv$bmiPOSTcat.or)
table(data.csv$bmiPREcat.or)
table(data.csv$bmiPOSTcat.or)
View(data.csv)
data.csv$Age35plus <- data.csv$Age
View(data.csv)
data.csv[data.csv$Age35plus < 35, "Age35plus"] <- NA
View(data.csv)
summary(data.csv[,c(Age, Age35plus)])
summary(data.csv[,c("Age", "Age35plus")])
with(data.csv, mean(Age))
with(data.csv, mean(Age35plus))
with(data.csv, mean(Age35plus, na.rm=TRUE))
View(data.csv)
is.na(data.csv$Age35plus)
sum(is.na(data.csv$Age35plus))
with(data.csv,
sum(is.na(Age35plus)))
with(data.csv,
sum(is.na()))
sum(is.na(data.csv))
View(data.csv)
with(data.csv,
sum(is.na(.)))
dataall <- na.omit(data.csv)
View(dataall)
complete.cases(data.csv)
complete.cases(data.csv)
data.csv$SubjectID[complete.cases(data.csv)]
data.csv$SubjectID[5]
a <- complete.cases(data.csv)
data.csv$SubjectID[a]
b <- c(4,5,6,7,8)
b[c(T, F, T, T, F)]
i <- c(T, F, T, T, F)
b[i]
str(b)
str(data.csv$SubjectID)
i2 <- c(T, F, T, T, F, T, F, T, T, F, T, F, T, T, F, T, F, T, T, F)
data.csv$SubjectID[i]
data.csv$SubjectID[!i]
i <- complete.cases(data.csv)
data.csv$SubjectID[i]
data.csv$SubjectID[!i]
View(data.csv)
View(data.csv)
dataall <- na.omit(data.csv) # data without subjects 5, 9 and 15
i <- complete.cases(data.csv)
data.csv$SubjectID[i]
data.csv$SubjectID[!i]
dataall2 <- data.csv[i,]
View(dataall2)
boxplot(table(data.csv$GenderFactor))
View(data.csv)
table(data.csv$GenderFactor)
boxplot(table(data.csv$GenderFactor))
barplot(table(data.csv$GenderFactor))
p <- ggplot(data.csv, aes(bmiPRE, bmiPOST)) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue")
library("ggplot2", lib.loc="~/R/win-library/3.2")
p <- ggplot(data.csv, aes(bmiPRE, bmiPOST)) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue")
p
p <- ggplot(data.csv, aes(bmiPRE, bmiPOST)) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
ggtitle("BMI PRE v POST: RED smoothed line, BLUE linear fit line")
p
p <- ggplot(data.csv, aes(bmiPRE, bmiPOST)) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~GenderFactor) +
ggtitle("Panels for Gender, RED smoothed line, BLUE linear fit line")
p
# ======================================
# we can also use this factor to color
# code the points and associated model fits
# ======================================
p <- ggplot(data.csv, aes(bmiPRE, bmiPOST)) +
geom_point(aes(colour = GenderFactor)) +
geom_smooth(method = "lm", aes(colour = GenderFactor)) +
ggtitle("Colored by Gender")
p
fit1 <- lm(bmiPOST ~ bmiPRE, data=data.csv)
fit1
summary(fit1)
coef(fit1)
anova(fit1)
kable(coef(fit1))
library("knitr", lib.loc="~/R/win-library/3.2")
kable(coef(fit1))
kable(fit1$coefficients)
str(fit1$coefficients)
str(fit1$coefficients[[1:2]])
names(fit1$coefficients)
fit1$coefficients
as.table(fit1$coefficients)
kable(as.table(fit1$coefficients))
kable(as.data.frame(fit1$coefficients))
str(summary(fit1))
summary(fit1)
summary(fit1)$coefficients
str(summary(fit1)$coefficients)
as.data.frame(summary(fit1)$coefficients)
kable(as.data.frame(summary(fit1)$coefficients))
View(data.csv)
View(data.csv)
myvars <- c("Age", "bmiPRE", "bmiPREcat.or",
"bmiPOST", "bmiPOSTcat.or",
"GenderFactor")
kable(data.csv[myvars,])
library(knitr)
opts_knit$set(base.dir='./', fig.path='', out.format='md')
opts_chunk$set(prompt=TRUE, comment='', results='markup')
# See yihui.name/knitr/options for more Knitr options.
##### Put other setup R code here
# end setup chunk
myvars <- c("Age", "bmiPRE", "bmiPREcat.or",
"bmiPOST", "bmiPOSTcat.or",
"GenderFactor")
names(data.csv[,myvars]) <- c("Age",
"BMI PRE", "BMI PRE Category",
"BMI POST", "BMI POST Category",
"Gender")
kable(data.csv[,myvars])
data.csv <- read.csv(file="Dataset_01_comma.csv")
data.csv[18,"Height"] <- 5.6
data.csv$bmiPRE <- (data.csv$WeightPRE*703)/((data.csv$Height*12)**2)
data.csv$bmiPOST <- (data.csv$WeightPOST*703)/((data.csv$Height*12)**2)
data.csv$GenderFactor <- factor(data.csv$GenderCoded,
levels = c(1,2),
labels = c("Male","Female"))
data.csv <- within(data.csv,{
bmiPREcat <- NA
bmiPREcat[bmiPRE < 18.5] <- "underweight"
bmiPREcat[bmiPRE >= 18.5 & bmiPRE < 25] <- "normal"
bmiPREcat[bmiPRE >= 25 & bmiPRE < 30] <- "overweight"
bmiPREcat[bmiPRE >= 30] <- "obese"
})
data.csv <- within(data.csv,{
bmiPOSTcat <- NA
bmiPOSTcat[bmiPOST < 18.5] <- "underweight"
bmiPOSTcat[bmiPOST >= 18.5 & bmiPOST < 25] <- "normal"
bmiPOSTcat[bmiPOST >= 25 & bmiPOST < 30] <- "overweight"
bmiPOSTcat[bmiPOST >= 30] <- "obese"
})
data.csv$bmiPREcat.or <- factor(data.csv$bmiPREcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
data.csv$bmiPOSTcat.or <- factor(data.csv$bmiPOSTcat,
order = TRUE,
levels = c("underweight",
"normal",
"overweight",
"obese"))
myvars <- c("Age", "bmiPRE", "bmiPREcat.or",
"bmiPOST", "bmiPOSTcat.or",
"GenderFactor")
names(data.csv[,myvars]) <- c("Age",
"BMI PRE", "BMI PRE Category",
"BMI POST", "BMI POST Category",
"Gender")
data.csv[,myvars]
myvars <- c("Age", "bmiPRE", "bmiPREcat.or",
"bmiPOST", "bmiPOSTcat.or",
"GenderFactor")
data <- data.csv[,myvars]
names(data)
names(data) <- c("Age",
"BMI PRE", "BMI PRE Category",
"BMI POST", "BMI POST Category",
"Gender")
names(data)
data
kable(data)
data <- data.csv[!is.na(data.csv$GenderFactor),]
p <- ggplot(data, aes(bmiPRE, bmiPOST)) +
geom_point() +
geom_smooth(method = "loess", colour = "red", se = FALSE) +
geom_smooth(method = "lm", colour = "blue") +
facet_wrap(~GenderFactor) +
ggtitle("Panels for Gender, RED smoothed line, BLUE linear fit line")
p
fit1 <- lm(bmiPOST ~ bmiPRE, data=data.csv)
fit1
anova(fit1)
str(anova(fit1))
as.data.frame(anova(fit1))
Sys.time()
